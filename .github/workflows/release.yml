name: Release CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

permissions: write-all

jobs:
  release-build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        if: matrix.os != 'ubuntu-latest'
        uses: dtolnay/rust-toolchain@1.77.0

      - name: Add Rust Target
        if: matrix.os != 'ubuntu-latest'
        run: rustup target add ${{ matrix.target }}

      - name: Build
        if: matrix.os != 'ubuntu-latest'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build
        if: matrix.os == 'ubuntu-latest'
        uses: ./.github/build-for-linux
        with:
          target: ${{ matrix.target }}

      # - name: CodeSign
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     security list-keychain -d user
      #     echo "${{ secrets.APPLE_CERTIFICATE }}" | base64 --decode > cert.p12
      #     security create-keychain -p tauri-build tauri-build.keychain
      #     security unlock-keychain -p tauri-build tauri-build.keychain
      #     security import cert.p12 -k tauri-build.keychain -P ${{ secrets.APPLE_CERTIFICATE_PASSWORD }} -T /usr/bin/codesign -T /usr/bin/pkgbuild -T /usr/bin/productbuild
      #     security set-keychain-settings -t 3600 -u tauri-build.keychain
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k tauri-build tauri-build.keychain
      #     security list-keychain -d user -s /Users/runner/Library/Keychains/login.keychain-db tauri-build.keychain
      #     codesign --force -s "${{ secrets.APPLE_SIGNING_IDENTITY }}" --keychain tauri-build.keychain --options runtime target/${{ matrix.target }}/release/clash-verge-service
      #     codesign --force -s "${{ secrets.APPLE_SIGNING_IDENTITY }}" --keychain tauri-build.keychain --options runtime target/${{ matrix.target }}/release/install-service
      #     codesign --force -s "${{ secrets.APPLE_SIGNING_IDENTITY }}" --keychain tauri-build.keychain --options runtime target/${{ matrix.target }}/release/uninstall-service

      - name: Generate Artifact (Linux / MacOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p ${{ github.workspace }}/artifact
          cp target/${{ matrix.target }}/release/clash-verge-service ${{ github.workspace }}/artifact/clash-verge-service
          cp target/${{ matrix.target }}/release/install-service ${{ github.workspace }}/artifact/install-service
          cp target/${{ matrix.target }}/release/uninstall-service ${{ github.workspace }}/artifact/uninstall-service
          cd ${{ github.workspace }}/artifact
          tar -czf clash-verge-service-${{ matrix.target }}.tar.gz install-service uninstall-service clash-verge-service

      - name: Generate Artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p ${{ github.workspace }}/artifact
          cp target/${{ matrix.target }}/release/clash-verge-service.exe ${{ github.workspace }}/artifact/clash-verge-service.exe
          cp target/${{ matrix.target }}/release/install-service.exe ${{ github.workspace }}/artifact/install-service.exe
          cp target/${{ matrix.target }}/release/uninstall-service.exe ${{ github.workspace }}/artifact/uninstall-service.exe
          cd ${{ github.workspace }}/artifact
          tar -czf clash-verge-service-${{ matrix.target }}.tar.gz install-service.exe uninstall-service.exe clash-verge-service.exe

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clash-verge-service-${{ matrix.target }}
          path: |
            ${{ github.workspace }}/artifact/clash-verge-service-${{ matrix.target }}.tar.gz

  create-prerelease:
    needs: [release-build]
    runs-on: ubuntu-latest
    steps:
      # - name: Extract tag name
      #   id: extract_tag
      #   run: |
      #     echo "Tag Name: ${GITHUB_REF##*/}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          registry-url: https://registry.npmjs.org/
          node-version: lts/*

      - name: Generate Changelog
        run: npx changelogithub --output CHANGELOG.txt
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R ./artifacts

      - name: Create Pre-Release
        uses: softprops/action-gh-release@v2
        with:
          name: Clash Verge Service ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body_path: CHANGELOG.txt
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./artifacts/**
